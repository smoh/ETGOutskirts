#!/usr/bin/env python
""" Script to download NSA deblend, ivar, and psf images """

import urllib
import os, errno
from urllib2 import urlopen, URLError, HTTPError


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def downloadfile(url, savename=None, prefix=None):
    """
    Download a file from url

    savename : target filename (default=basename of url)
    """
    if not savename:
        savename = os.path.basename(url)
    if not prefix:
        prefix = './'

    mkdir_p(prefix)
    try:
        f = urlopen(url)
        # Open our local file for writing
        with open(prefix +'/'+ savename, "wb") as local_file:
            local_file.write(f.read())
            local_file.close()

    #handle errors
    except HTTPError, e:
        print "HTTP Error:", e.code, url
    except URLError, e:
        print "URL Error:", e.reason, url


def downloadNSA(subdir, iauname, pid, aid, prefix):
    """
    Download NSA child, parent, and psf images
    """
    #TODO: add PSF images

    url = 'http://sdss.physics.nyu.edu/mblanton/v0/detect/v0_1/%s/' % (subdir)

    downloadfile(url + 'atlases/%s/%s-%s-atlas-%s.fits.gz' % (
        pid, iauname, pid, aid), prefix=prefix + '/images')
    downloadfile(url + 'parents/%s-parent-%s.fits.gz' % (
        iauname, pid), prefix=prefix + '/ivar')

    for band in ['u', 'g', 'r', 'i', 'z', 'fd','nd']:
        downloadfile('http://sdss.physics.nyu.edu/mblanton/v0/detect/v0_1/%s/%s-%s-bpsf.fits.gz' % (subdir, iauname, band), prefix=prefix+'/psf/')


def main():
    import progressbar
    import argparse
    from astropy.table import Table
    parser = argparse.ArgumentParser(description='Download NSA images')
    parser.add_argument('catalog', type=str, help='catalog file (assumes NSA column names)')
    parser.add_argument('--prefix', type=str, help='directory prefix',
                        default='./')
    args = parser.parse_args()

    # read master catalog
    if args.catalog.endswith('.fits'):
        master = Table.read(args.catalog)
    else:
        master = Table.read(args.catalog, format='ascii')
    # check if all columns needed exist
    for name in ['IAUNAME', 'SUBDIR', 'PID', 'AID']:
        if not name in master.colnames:
            raise 'Column %s not found' % name
    progress = progressbar.ProgressBar()
    for row in progress(master):
        downloadNSA(row['SUBDIR'], row['IAUNAME'], row['PID'], row['AID'], args.prefix)


if __name__ == '__main__':
    main()

