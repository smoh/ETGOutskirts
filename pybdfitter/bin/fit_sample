#!/usr/bin/env python
""" wrapper for running fit_sample.pro """

import argparse
from subprocess import call
import datetime

def mkdir_p(path):
    import os, errno
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise


parser = argparse.ArgumentParser(description='run fit_sample on input file')
parser.add_argument('input',
                        help='input fits table')
parser.add_argument('profile', type=str,
                        help='[profile name]:[number of params] e.g., SER:8')
parser.add_argument('start', type=int,
                        help='zero-based starting index')
parser.add_argument('end', type=int,
                        help='zero-based end index (inclusive)')
parser.add_argument('outdir',
                        help='output directory')
parser.add_argument('datadir',
                        help='data directory')
parser.add_argument('-f', '--filter', type=str, default='r',
                        help='filter to fit')
parser.add_argument('-r', '--res', action='store_true',
                        help='store model images')
parser.add_argument('-d', '--debug', action='store_true',
                        help='run in debug mode')
parser.add_argument('--savepsf', action='store_true',
                        help="save sdss psf; requires [data]/sdss_psf directory")
parser.add_argument('-i', '--imgdir', type=str,
                        help='image directory')
args = parser.parse_args()

profiles_str = '{' + '%s' % (args.profile)+'}'
# output directories
mkdir_p(args.outdir)
if args.res:
    mkdir_p(args.outdir + '/models')
if args.savepsf:
    mkdir_p(args.datadir + '/sdss_psf')


# build command
idl_command = "fit_sample, '{:s}', {:d}, {:d}, '{:s}', '{:s}'".format(
    args.input, args.start, args.end+1, args.outdir+'/', args.datadir+'/')
idl_command += ', profiles={:s}'.format(profiles_str)
if args.res:
    idl_command += ', /residuals'
if args.debug:
    idl_command += ', /debug'
if args.savepsf:
    idl_command += ', /savepsf'
if args.imgdir:
    idl_command += ", imgdir='{:s}'".format(args.imgdir + '/')

print datetime.datetime.now()
print idl_command

# call(["idl", "-e", idl_command])
